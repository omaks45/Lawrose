version: '3.8'

services:
  # User Service Application
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lawrose-user-service
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:${PORT:-5000}"
    env_file:
      - .env
    environment:
      # Your actual environment variables
      - NODE_ENV=development
      - PORT=${PORT:-5000}
      - MONGO_URL=${MONGO_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_SERVICE=${EMAIL_SERVICE:-gmail}
      - EMAIL_USER=${EMAIL_USER}
      - CLOUDINARY_NAME=${CLOUDINARY_NAME}
      - CLOUDINARY_KEY=${CLOUDINARY_KEY}
      - CLOUDINARY_SECRET=${CLOUDINARY_SECRET}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - KAFKA_CLIENT_ID=${KAFKA_CLIENT_ID:-LawUser}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:-LawUser-group}
      # Connection logging flags
      - LOG_DB_CONNECTION=true
      - LOG_REDIS_CONNECTION=true
      - LOG_KAFKA_CONNECTION=true
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - lawrose-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-5000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Zookeeper (Required for Kafka - Local fallback only)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: lawrose-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - lawrose-network
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - local-kafka

  # Apache Kafka (Local fallback only)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: lawrose-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - lawrose-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - local-kafka

  # Development Tools (Optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: lawrose-kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - lawrose-network
    profiles:
      - dev
      - local-kafka

networks:
  lawrose-network:
    driver: bridge
    name: lawrose-network

volumes:
  kafka_data:
    name: lawrose_kafka_data
  zookeeper_data:
    name: lawrose_zookeeper_data
  zookeeper_logs:
    name: lawrose_zookeeper_logs